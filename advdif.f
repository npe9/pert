      PROGRAM ADVDIF
C  THIS PROGRAMME SOLVES THE ADVECTION-DIFFUSION EQUATION IN ONE 
C  DIMENSION WITH ADVECTION ALONE OR DIFFUSION ALONE IF REQUIRED.
C  FOR ADVECTION ALONE THE TIMESTEP COMES FROM THE USER-INPUT
C  COURANT NUMBER, VELOCITY AND SPACE INTERVAL.   FOR DIFFUSION
C  ALONE IT IS GIVEN BY THE DT = R*(DX)**2/D.   WITH BOTH ADVECTION
C  AND DIFFUSION THE TIMESTEP FROM THE COURANT NUMBER IS GIVEN
C  PRIORITY BUT IF IT MAKES R > 0.5 THEN THE TIMESTEP IS ADJUSTED 
C  TO GIVE R = 0.5.   PERIODIC BOUNDARY CONDITIONS ARE IMPOSED SO
C  THAT A DISTURBANCE PASSING THROUGH ONE BARRIER REAPPEARS AT THE
C  OTHER.
C  SEVERAL FINITE-DIFFERENCE FORMULAE ARE AVAILABLE AND THE USER 
C  MUST COMMENT OUT THE ONES NOT REQUIRED.
C  *****************************************************************
C
      DIMENSION Q(0:999),TAB(0:999,0:1000),X(0:999)
      CHARACTER ANS*1
      WRITE(6,'(''INPUT VELOCITY, DIFFUSION COEFFICIENT AND'')')
      WRITE(6,'(''THE GRID SPACING DX'')')
      READ(5,*)U,D,DX
      OPEN(UNIT=11,FILE='Q1.DAT')
      OPEN(UNIT=12,FILE='Q2.DAT')
      OPEN(UNIT=13,FILE='Q3.DAT')
      OPEN(UNIT=14,FILE='Q4.DAT')
      OPEN(UNIT=15,FILE='Q5.DAT')
      OPEN(UNIT=16,FILE='Q6.DAT')
C  SET VALUES IN X ARRAY
      DO 16 I=0,999
      X(I)=I*DX
   16 CONTINUE
C  TEST IF ADVECTION IS PRESENT
      IF(U.LT.1.0E-20)GOTO 1
      WRITE(6,'(''INPUT THE COURANT NUMBER'')')
      READ(5,*)C
C  CALCULATE DT
      DT=C*DX/U
C  CALCULATE R
      R=D*DT/DX**2
      IF(R.GT.0.5)DT=0.5*DX**2/D
      GOTO 2
    1 WRITE(6,'(''INPUT R=D*DT/DX**2'')')
      READ(5,*)R
C  CALCULATE DT
      DT=R*DX**2/D
    2 WRITE(6,100)DT
  100 FORMAT(6H DT = ,F8.5)
C  CLEAR Q AND TAB TABLES
      DO 11 I=0,999
      Q(I)=0
      DO 11 J=0,1000
      TAB(I,J)=0
   11 CONTINUE
C  READ IN INITIAL DISTRIBUTION OF Q
      WRITE(6,'(''HOW MANY Q VALUES TO BE READ IN?'')')
      READ(5,*)N
      DO 12 L=1,N
      WRITE(6,'(''READ IN I AND Q[I]'')')
      READ(5,*)I,Q(I)
   12 CONTINUE
C  PLACE INITIAL DISTRIBUTION IN TAB
      DO 15 I=0,999
      TAB(I,0)=Q(I)
   15 CONTINUE
C  SET THE NUMBER OF TIMESTEPS FOR THE SIMULATION
      WRITE(6,'(''INPUT THE NUMBER OF SIMULATION TIMESTEPS'')')
      READ(5,*)NTIME
      DO 5 J=1,NTIME
C  INTEGRATE THE EQUATIONS STORING THE NEW Q VALUES IN TAB
      DO 21 I=0,999
      IP=MOD(I+1,1000)
      IM=MOD(I+999,1000)
C  PURE DIFFUSION TIME F-D, SPACE C-D (EXPLICIT METHOD)
C      TAB(I,J)=(1-2*R)*Q(I)+R*(Q(IP)+Q(IM))
C  EQUATION (7.6) ADVECTION ONLY.  TIME F-D, SPACE C-D.
C      TAB(I,J)=Q(I)-C*(Q(IP)-Q(IM))/2
C  EQUATION (7.7) ADVECTION ONLY.  TIME F-D, SPACE B-D
C      TAB(I,J)=(1-C)*Q(I)+C*Q(IM)
C  EQUATION (7.8) ADVECTION WITH SPACE B-D, DIFFUSION WITH SPACE C-D
C        TAB(I,J)=(1-2*R-C)*Q(I)+R*Q(IP)+(R+C)*Q(IM)
C  EQUATION (7.21) BOTH ADVECTION AND DIFFUSION WITH SPACE C-D
C      TAB(I,J)=(1-2*R)*Q(I)+(R-C/2)*Q(IP)+(R+C/2)*Q(IM)
C  THE LAX-WENDROFF ADVECTION EQUATION (7.29)
C      TAB(I,J)=C*(1+C)/2*Q(IM)+(1-C*C)*Q(I)-C*(1-C)/2*Q(IP)
C  QUICKEST METHOD FOR ADVECTION+DIFFUSION
      IMM=MOD(I+998,1000)
      IPP=MOD(I+2,1000)
      C1=0
      C2=R*(1-C)-C*(C-1)*(C-2)/6
      C3=1-R*(2-3*C)+C*(C*C-2*C-1)/2
      C4=R*(1-3*C)-C*(C+1)*(C-2)/2
      C5=R*C+C*(C*C-1)/6
      TAB(I,J)=C1*Q(IPP)+C2*Q(IP)+C3*Q(I)+C4*Q(IM)+C5*Q(IMM)
   21 CONTINUE
C  UPDATE Q VALUES
      DO 22 I=0,999
      Q(I)=TAB(I,J)
   22 CONTINUE               
    5 CONTINUE
C  EXTRACT UP TO 6 SETS OF Q VALUES FOR GRAPHICAL OUTPUT
   30 WRITE(6,'(''YOU CAN NOW SET UP FILES Q1.DAT TO Qk.DAT'')')
      WRITE(6,'(''WITH VALUES OF X AND Q FOR GRAPHICAL OUTPUT'')')
      WRITE(6,'(''FOR k<=6.  DO YOU WANT TO DO THIS? [Y/N]'')')
      READ(5,50)ANS 
   50 FORMAT(A1)   
      IF(ANS.EQ.'N'.OR.ANS.EQ.'n')GOTO 200
      IF(ANS.EQ.'Y'.OR.ANS.EQ.'y')GOTO 34
      GOTO 30
   34 WRITE(6,'(''INPUT THE NUMBER OF SETS OF Q VALUES YOU REQUIRE'')')
      READ(5,*)NSET
      DO 32 I=1,NSET
      WRITE(6,'(''READ IN TIMESTEP NUMBER OF SET [0 TO 100]'')')
      READ(5,*)J
      M=10+I
      DO 36 II=0,999
      WRITE(M,*)X(II),TAB(II,J)
   36 CONTINUE
   32 CONTINUE
  200 STOP
      END
