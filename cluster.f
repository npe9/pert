      PROGRAM CLUSTER
C  THIS PROGRAM SETS UP A CLUSTER OF N SOLAR-MASS STARS IN A SPHERICAL
C  VOLUME OF RADIUS R.   THE POSITIONS OF THE STARS ARE CHOSEN RANDOMLY
C  AND THEN ADJUSTED TO GIVE THE CENTRE OF MASS AT THE ORIGIN. 
C  THE VELOCITIES OF THE STARS ARE CHOSED TO SATISFY THE VIRIAL THEOREM
C  AND ALSO TO GIVE ZERO MOMENTUM. STARS ARE GIVEN CLOSE TO THE CORRECT 
C  RMS SPEED BUT IN A RANDOM DIRECTION.
C  THE INITIAL STEP IS TAKEN BY A PREDICTOR-CORRECTOR PROCESS AND THEN 
C  THE LEAPFROG METHOD IS STARTED WITH A TIMESTEP EQUAL TO 
C  RMIN/(100*VMAX) WHERE RMIN IS THE MINIMUM DISTANCE BETWEEN STARS 
C  AND VMAX THE MAXIMUM SPEED OF ANY STAR.  IN EACH CYCLE RMIN AND
C  VMAX ARE FOUND.   IF THE RATIO RMIN/(VMAX*DT) IS LESS THAN 50 OR MORE 
C  THAN 150 THEN IT IS READJUSTED TO RMIN/(100*VMAX) AND A PREDICTOR-
C  CORRECTOR STEP TAKEN TO RESTART THE LEAPFROG METHOD.
      DIMENSION X(100),Y(100),Z(100),VX(100),VY(100),VZ(100)      
      DIMENSION DELVX(100,2),DELVY(100,2),DELVZ(100,2),STAT(4) 
      CHARACTER ANS*1
      PI=4.0*ATAN(1.0)
      G=4.0*PI*PI
      WRITE(6,'(''INPUT THE NUMBER OF STARS IN THE CLUSTER [<=100]'')')
      READ(5,*)N
      WRITE(6,'(''INPUT THE RADIUS OF THE CLUSTER IN A.U.'')')
      READ(5,*)R
      WRITE(6,'(''INPUT TOTAL TIME FOR THE SIMULATION IN YEARS'')')      
      READ(5,*)TOTIME
   55 WRITE(6,'(''PRINT INITIAL AND FINAL COORDINATES AND '')')
      WRITE(6,'(''VELOCITIES [Y/N]'')')
      READ(5,50)ANS
   50 FORMAT(A1)
      IF(ANS.EQ.'N'.OR.ANS.EQ.'n')THEN
      KEY=1
      GOTO 60
      ENDIF
      IF(ANS.EQ.'Y'.OR.ANS.EQ.'y')THEN
      KEY=0
      GOTO 60
      ENDIF
      GOTO 55
   60 CALL INITIAL(X,Y,Z,VX,VY,VZ,N,R,KEY)
C     STORE THE INITIAL POSITIONS AND VELOCITIES IN FILE START.DAT 
      OPEN(UNIT=10, FILE='START.DAT')
      WRITE(10,*)N,(X(I),Y(I),Z(I),VX(I),VY(I),VZ(I),I=1,N)
C  A CHOICE IS MADE WHETHER OR NOT TO DETERMINE THE GEOMETRIC 
C  MOMENT OF INERTIA, THE POSITION AND SPEED OF THE CENTRE OF MASS
C  AND THE ENERGY.
   38 WRITE(6,'(''DO YOU WISH TO PRINT THE INITIAL GEOMETRIC'')')
      WRITE(6,'(''MOMENT OF INERTIA, POSITION AND SPEED OF '')')
      WRITE(6,'(''CENTRE OF MASS AND ENERGY? [Y/N]'')')
      READ(5,50)ANS
      IF(ANS.EQ.'N'.OR.ANS.EQ.'n')GOTO 39
      IF(ANS.EQ.'Y'.OR.ANS.EQ.'y')THEN
      CALL STATS(X,Y,Z,VX,VY,VZ,N,G,STAT)
      GOTO 40
      ENDIF
      GOTO 38
   40 WRITE(9,'('' '')')
      WRITE(9,'('' '')')
      WRITE(9,'(''THE INITIAL STATISTICS'')')
      WRITE(9,300)STAT
  300 FORMAT(6H R2 = ,E10.3,10H COMPOS = ,E10.3,10H COMVEL = ,
     +E10.3,10H TOTENG = ,F10.4)  
C  FIND MINIMUM DISTANCE AND GREATEST SPEED
   39 RMIN2=1.0E12
      VMAX2=0
      DO 1 I=1,N-1
      VV=VX(I)**2+VY(I)**2+VZ(I)**2
      IF(VV.GT.VMAX2)VMAX2=VV
      DO 1 J=I+1,N
      RR=(X(I)-X(J))**2+(Y(I)-Y(J))**2+(Z(I)-Z(J))**2
      IF(RR.LT.RMIN2)RMIN2=RR
    1 CONTINUE
      VV=VX(N)**2+VY(N)**2+VZ(N)**2
      IF(VV.GT.VMAX2)VMAX2=VV
      TIME=0
C  NOW FIX EITHER INITIAL TIMESTEP OR REVISED TIMESTEP
   10 DT=0.01*SQRT(RMIN2/VMAX2)
C  IF THE TIMESTEP IS LESS THAN ONE YEAR THE PROGRAM WILL RUN TOO
C  SLOWLY.  IN THIS CASE TERMINATE THE PROGRAM WITH MESSAGE.
      IF(DT.LT.1)THEN
      OPEN(UNIT=9,FILE='LPT1')
      WRITE(9,200)TIME
      WRITE(9,'(''TRY AGAIN WITH A NEW SEED IN SUBROUTINE INITIAL'')')
  200 FORMAT(22H PROGRAM TERMINATED AT,F8.1,7H YEARS.)
      GOTO 20
      ENDIF
C  NOW TAKE AN INITIAL PREDICTOR-CORRECTOR STEP.   THIS NEEDS TO GIVE
C  ONLY THE COORDINATES AT TIME DT.
C  FIRST CLEAR TABLES IN WHICH INITIAL ACCELERATIONS AND ESTIMATES OF 
C  FINAL ACCELERATIONS WILL BE STORED.
      DO 2 I=1,N
      DO 2 J=1,2
      DELVX(I,J)=0
      DELVY(I,J)=0
      DELVZ(I,J)=0
    2 CONTINUE        
C  CALCULATE ACCELERATIONS AT INITIAL AND ESTIMATED FINAL POSITIONS
      DO 3 K=1,2
      DO 3 I=1,N-1
      DO 3 J=I+1,N
      XD=X(I)-X(J)+(K-1)*DT*(VX(I)-VX(J))
      YD=Y(I)-Y(J)+(K-1)*DT*(VY(I)-VY(J))
      ZD=Z(I)-Z(J)+(K-1)*DT*(VZ(I)-VZ(J))
      AX=ACC(G,XD,YD,ZD)
      DELVX(I,K)=DELVX(I,K)+AX
      DELVX(J,K)=DELVX(J,K)-AX
      AX=ACC(G,YD,ZD,XD)
      DELVY(I,K)=DELVY(I,K)+AX
      DELVY(J,K)=DELVY(J,K)-AX
      AX=ACC(G,ZD,XD,YD)
      DELVZ(I,K)=DELVZ(I,K)+AX
      DELVZ(J,K)=DELVZ(J,K)-AX
    3 CONTINUE
C  NOW ESTIMATE THE NEW POSITIONS FROM AVERAGE VELOCITIES IN THE TIMESTEP
      DO 4 I=1,N
      X(I)=X(I)+DT*(VX(I)+0.25*DT*(DELVX(I,1)+DELVX(I,2)))
      Y(I)=Y(I)+DT*(VY(I)+0.25*DT*(DELVY(I,1)+DELVY(I,2)))
      Z(I)=Z(I)+DT*(VZ(I)+0.25*DT*(DELVZ(I,1)+DELVZ(I,2)))
    4 CONTINUE       
C  THE LEAPFROG PROCESS CAN NOW BE STARTED
C  COMPUTE NEW VALUES OF VELOCITY
      TIME=TIME+DT              
   11 DO 5 I=1,N
      DELVX(I,1)=0
      DELVY(I,1)=0
      DELVZ(I,1)=0
    5 CONTINUE
      RMIN2=1.0E12
      DO 6 I=1,N-1      
      DO 6 J=I+1,N
      XD=X(I)-X(J)
      YD=Y(I)-Y(J)
      ZD=Z(I)-Z(J)
      RD2=XD*XD+YD*YD+ZD*ZD
      IF(RD2.LT.RMIN2)RMIN2=RD2
      AX=ACC(G,XD,YD,ZD)
      DELVX(I,1)=DELVX(I,1)+AX
      DELVX(J,1)=DELVX(J,1)-AX
      AX=ACC(G,YD,ZD,XD)
      DELVY(I,1)=DELVY(I,1)+AX
      DELVY(J,1)=DELVY(J,1)-AX
      AX=ACC(G,ZD,XD,YD)
      DELVZ(I,1)=DELVZ(I,1)+AX
      DELVZ(J,1)=DELVZ(J,1)-AX
    6 CONTINUE
      DO 7 I=1,N
      VX(I)=VX(I)+2*DT*DELVX(I,1)
      VY(I)=VY(I)+2*DT*DELVY(I,1)
      VZ(I)=VZ(I)+2*DT*DELVZ(I,1)
    7 CONTINUE  
C COMPUTE NEW VALUES OF POSITION
      VMAX2=0
      DO 8 I=1,N
      X(I)=X(I)+2*DT*VX(I)
      Y(I)=Y(I)+2*DT*VY(I)
      Z(I)=Z(I)+2*DT*VZ(I)
      VV=VX(I)**2+VY(I)**2+VZ(I)**2
      IF(VV.GT.VMAX2)VMAX2=VV
    8 CONTINUE
      TIME=TIME+2*DT
      IF(TIME.GT.TOTIME)GOTO 20      
C  TEST FOR TIMESTEP SUITABILITY WITH VALUES OF RMIN2 AND VMAX2
C  WHILE THEY HAVE COME FROM DIFFERENT TIMESTEPS IT STILL PROVIDES 
C  A SUITABLE TEST.
      TEST=RMIN2/VMAX2/DT/DT
      IF(TEST.LT.2500.OR.TEST.GT.12500)GOTO 10
      GOTO 11     
C  THE CALCULATION IS COMPLETE WITH TOTAL TIME >= TOTIME.   THE FINAL
C  POSITIONS AND COORDINATES ARE STORED IN FILE FINISH.DAT.   FIRST
C  SUBTRACT ONE TIMESTEP OF VELOCITY FROM THE POSITIONS TO GIVE
C  POSITIONS AND VELOCITIES AT THE SAME TIME. 
   20 DO 12 I=1,N
      X(I)=X(I)-DT*VX(I)
      Y(I)=Y(I)-DT*VY(I)
      Z(I)=Z(I)-DT*VZ(I)
   12 CONTINUE
      OPEN(UNIT=11,FILE='FINISH.DAT')
      WRITE(11,*)N,(X(I),Y(I),Z(I),VX(I),VY(I),VZ(I),I=1,N)
      IF(KEY.EQ.0)WRITE(9,100)(X(I),Y(I),Z(I),VX(I),VY(I),VZ(I),I=1,N)
  100 FORMAT(6E11.4)
C  A CHOICE IS MADE WHETHER OR NOT TO DETERMINE THE GEOMETRIC 
C  MOMENT OF INERTIA, THE POSITION AND SPEED OF THE CENTRE OF MASS
C  AND THE ENERGY.
   48 WRITE(6,'(''DO YOU WISH TO PRINT THE FINAL GEOMETRIC'')')
      WRITE(6,'(''MOMENT OF INERTIA, POSITION AND SPEED OF '')')
      WRITE(6,'(''CENTRE OF MASS AND ENERGY? [Y/N]'')')
      READ(5,50)ANS
      IF(ANS.EQ.'N'.OR.ANS.EQ.'n')GOTO 49
      IF(ANS.EQ.'Y'.OR.ANS.EQ.'y')THEN
      CALL STATS(X,Y,Z,VX,VY,VZ,N,G,STAT)
      GOTO 70
      ENDIF
      GOTO 48
   70 WRITE(9,'(''  '')')
      WRITE(9,400)TIME
  400 FORMAT(27H THE FINAL STATISTICS AFTER,F8.1,6H YEARS)
      WRITE(9,300)STAT
   49 STOP
      END
      FUNCTION ACC(G,X,Y,Z)
      R2=X*X+Y*Y+Z*Z
      ACC=-G*X/R2**1.5
      END

      SUBROUTINE INITIAL(X,Y,Z,VX,VY,VZ,N,R,KEY)             
      real one
      DIMENSION X(100),Y(100),Z(100),VX(100),VY(100),VZ(100),T(3)
C  THE RANDOM NUMBER GENERATOR IS INITIATED BY A SEED BETWEEN 0 AND 1.
C  THE FOLLOWING DATA STATEMENT CAN BE CHANGED IF A NEW SEED IS REQUIRED.
      DATA SEED/0.234/
      OPEN(UNIT=9,FILE='LPT1')
      PI=4*ATAN(1.0)
      G=4*PI*PI
      one=1.0
      RAN=MOD((SEED+PI)**5,one)
      DO 1 I=1,N
C  POSITION EACH STAR AT RANDOM POSITION WITHIN SPHERICAL VOLUME
    4 DO 2 J=1,3
      RAN=MOD((RAN+PI)**5,one)
      T(J)=2*RAN-1      
    2 CONTINUE  
      IF(T(1)**2+T(2)**2+T(3)**2.GT.1.0)GOTO 4
      X(I)=R*T(1)
      Y(I)=R*T(2)
      Z(I)=R*T(3)
    1 CONTINUE   
C  CALCULATE POTENTIAL ENERGY
      POTEN=0
      DO 3 I=1,N-1
      DO 3 J=I+1,N
      RIJ=SQRT((X(I)-X(J))**2+(Y(I)-Y(J))**2+(Z(I)-Z(J))**2)
      POTEN=POTEN-G/RIJ
    3 CONTINUE
C  CALCULATE MEAN SPEED FROM THE VIRIAL THEOREM
      VM=SQRT(-POTEN/N)
C  GIVE EVERY STAR THE SAME SPEED BUT IN A RANDOM DIRECTION
      DO 5 I=1,N
    7 DO 6 J=1,3
      RAN=MOD((RAN+PI)**5,one)
      T(J)=2*RAN-1
    6 CONTINUE
      TT=T(1)**2+T(2)**2+T(3)**2
      IF(TT.GT.1)GOTO 7
      ST=SQRT(TT)
      VX(I)=VM*T(1)/ST
      VY(I)=VM*T(2)/ST
      VZ(I)=VM*T(3)/ST
    5 CONTINUE 
  100 FORMAT(6E11.4)
C  NOW ADD OR SUBTRACT CONSTANT DX,DY,DZ,DVX,DVY,DVZ FROM EACH STAR TO
C  PUT THE CENTRE OF MASS AT THE ORIGIN AND TO GIVE ZERO MOMENTUM
      SUMX=0
      SUMY=0
      SUMZ=0
      SUMVX=0
      SUMVY=0
      SUMVZ=0
      DO 10 I=1,N
      SUMX=SUMX+X(I)
      SUMY=SUMY+Y(I)
      SUMZ=SUMZ+Z(I)
      SUMVX=SUMVX+VX(I)
      SUMVY=SUMVY+VY(I)
      SUMVZ=SUMVZ+VZ(I)
   10 CONTINUE
      DO 12 I=1,N
      X(I)=X(I)-SUMX/N
      Y(I)=Y(I)-SUMY/N
      Z(I)=Z(I)-SUMZ/N
      VX(I)=VX(I)-SUMVX/N
      VY(I)=VY(I)-SUMVY/N
      VZ(I)=VZ(I)-SUMVZ/N
   12 CONTINUE
C  FIND FACTOR TO RESTORE RMS SPEED TO VM
      SUM=0
      DO 13 I=1,N
      SUM=SUM+VX(I)**2+VY(I)**2+VZ(I)**2
   13 CONTINUE
      FACTOR=VM/SQRT(SUM/N)
      DO 14 I=1,N
      VX(I)=FACTOR*VX(I)
      VY(I)=FACTOR*VY(I)
      VZ(I)=FACTOR*VZ(I)
   14 CONTINUE      
      IF(KEY.EQ.0)WRITE(9,100)(X(I),Y(I),Z(I),VX(I),VY(I),VZ(I),I=1,N)
      RETURN
      END

      SUBROUTINE STATS(X,Y,Z,VX,VY,VZ,N,G,STAT)
      DIMENSION X(100),Y(100),Z(100),VX(100),VY(100),VZ(100),STAT(4)
      SUMR2=0
      SUMX=0
      SUMY=0
      SUMZ=0
      SUMVX=0
      SUMVY=0
      SUMVZ=0
      SUMVXYZ2=0
      SUMPOT=0
      DO 1 I=1,N
      SUMX=SUMX+X(I)
      SUMY=SUMY+Y(I)
      SUMZ=SUMZ+Z(I)
      SUMR2=SUMR2+X(I)**2+Y(I)**2+Z(I)**2
      SUMVX=SUMVX+VX(I)
      SUMVY=SUMVY+VY(I)
      SUMVZ=SUMVZ+VZ(I)
      SUMVXYZ2=SUMVXYZ2+VX(I)**2+VY(I)**2+VZ(I)**2
      IF(I.EQ.N)GOTO 1
      DO 2 J=I+1,N
      RIJ=SQRT((X(I)-X(J))**2+(Y(I)-Y(J))**2+(Z(I)-Z(J))**2)
      SUMPOT=SUMPOT-G/RIJ
    2 CONTINUE
    1 CONTINUE
      STAT(1)=SUMR2
      STAT(2)=SQRT(SUMX**2+SUMY**2+SUMZ**2)/N
      STAT(3)=SQRT(SUMVX**2+SUMVY**2+SUMVZ**2)/N
      STAT(4)=0.5*SUMVXYZ2+SUMPOT
      RETURN
      END  
