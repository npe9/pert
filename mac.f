      PROGRAM MAC
C  A SIMPLE TWO-DIMENSIONAL PROGRAM FOR THE APPLICATION OF THE MARKER
C  AND CELL METHOD.   THE ENCLOSURE CONSISTS OF 20 X 20 CELLS WITH 
C  RIGID WALLS WHERE A FULL CELL CONTAINS 16 MARKER PARTICLES INITIALLY
C  IN A REGULAR GRID.   PROBLEMS SHOULD INVOLVE NO MORE THAN 128
C  OCCUPIED CELLS AND HENCE NOT MORE THAN 2048 MARKER PARTICLES.
C  THE PROVIDED SET-UP SUBROUTINE STARTS WITH FLUID OCCUPYING 10x10  
C  CELLS IN THE LOWER LEFT OF THE CONTAINER. THERE IS NO VISCOSITY 
C  INCLUDED IN THE SIMULATION. A FREE-SLIP BOUNDARY CONDITION IS 
C  APPLIED.
C  THE PRESSURE-METHOD ALGORITHM IS THAT DUE TO HARLOW & WELCH (1965). 
C  UP TO SIX DATA FILES CAN BE PRODUCED - SEEn.DAT FOR n = 1 TO 6 -      
C  CORRESPONDING TO NUMBERS OF CYCLES SPECIFIED BY THE USER.
      DIMENSION U(-1:21,-1:20),V(-1:20,-1:21),P(-1:20,-1:20),X(2048),
     +Y(2048),IVAC(-1:20,-1:20),NCELL(-1:20,-1:20),UX(0:20,0:19),
     +VX(0:19,0:20),NC(6)
      COMMON X,Y
C  FIX SIZE OF CELL, ACCELERATION DUE TO GRAVITY AND LIQUID DENSITY.  
      DATA DEL,G,RO/0.05,9.81,1.0E3/     
      OPEN(UNIT=11,FILE='SEE1.DAT')
      OPEN(UNIT=12,FILE='SEE2.DAT')
      OPEN(UNIT=13,FILE='SEE3.DAT')
      OPEN(UNIT=14,FILE='SEE4.DAT')
      OPEN(UNIT=15,FILE='SEE5.DAT')
      OPEN(UNIT=16,FILE='SEE6.DAT')
      NPT=1
      WRITE(6,'('' Input no of output data files required'')')
      READ(5,*)NOUT
      DO 791 I=1,NOUT
      WRITE(6,400)I
  400 FORMAT(44H AFTER HOW MANY CYCLES DO YOU WANT DATA FILE,I2,1H?)
      READ(5,*)NC(I)
  791 CONTINUE
      TIME=0
      NOCYC=0
C  CLEAR ALL TABLES
      DO 1 I=-1,20
      DO 1 J=-1,21
      U(J,I)=0
      V(I,J)=0
      IF(J.EQ.21)GOTO 1
      P(I,J)=0
    1 CONTINUE
C  CALL ROUTINE TO SET UP MARKERS: NPART IS NUMBER OF MARKER PARTICLES.
      CALL SETUP(DEL,G,NPART)
C  FIND ALL VACUUM CELLS
   77 CALL VACUUM(NPART,NCELL,DEL,G)
C  FIND AND CATEGORIZE SURFACE CELLS
      CALL SURFACE(NCELL,IVAC)
C  NON-SURFACE CELLS HAVE IVAC=0. SURFACE CELLS HAVE IVAC=1 TO 15 
C  ACCORDING TO ARRANGEMENT OF NEIGHBOURING VACUUM CELLS.
C
C  CALCULATE TIMESTEP.   THIS IS BASED ON THE MAXIMUM DISTANCE MOVED BY
C  ANY ELEMENT OF FLUID BEING LESS THAN ONE QUARTER OF A CELL DIMENSION.
C  GRAVITY IS INCLUDED IN THE VERTICAL DIRECTION AND POSSIBLE PRESSURE
C  GRADIENTS IN THE HORIZONTAL DIRECTION.
C  FIND MAXIMUM PRESSURE
      PMAX=0
      DO 57 I=0,19
      DO 57 J=0,19
      IF(P(I,J).GT.PMAX)PMAX=P(I,J)
   57 CONTINUE
      UMAX=0
      VMAX=0
      DO 2 I=0,19
      DO 2 J=0,20
      IF(ABS(U(J,I)).GT.UMAX)UMAX=ABS(U(J,I))
      IF(ABS(V(I,J)).GT.VMAX)VMAX=ABS(V(I,J))
    2 CONTINUE
      IF(PMAX.LT.1.0E-10)PMAX=1.0E-10
      TU=RO*DEL/PMAX*(-UMAX+SQRT(UMAX**2+PMAX/2.0/RO))
      TV=2*(-VMAX+SQRT(VMAX*VMAX+DEL*G/2))/G
      DT=AMIN1(TU,TV)
C  CALCULATE PRESSURE TO GIVE ZERO DIVERGENCE
      CALL PRESSURE(P,U,V,NCELL,RO,G,DEL,DT)
C  FILL IN PRESSURE VALUES, NCELL AND IVAC AROUND BOUNDARY
      DO 79 M=0,19
      P(-1,M)=P(0,M)
      P(20,M)=P(19,M)
      P(M,-1)=P(M,0)
      P(M,20)=P(M,19)
      NCELL(-1,M)=NCELL(0,M)
      NCELL(20,M)=NCELL(19,M)
      NCELL(M,-1)=NCELL(M,0)
      NCELL(M,20)=NCELL(M,19)
      IVAC(-1,M)=IVAC(0,M)
      IVAC(20,M)=IVAC(19,M)
      IVAC(M,-1)=IVAC(M,0)
      IVAC(M,20)=IVAC(M,19)
   79 CONTINUE
C  ADVANCE COMPONENTS OF VELOCITY.   THERE ARE FREE-SLIP BOUNDARY WALLS 
C  BUT COMPONENTS OF VELOCITY PERPENDICULAR TO WALLS ARE ZERO.
C  FIRST DEAL WITH COMPONENTS U
      DO 4 I=-1,19
      DO 4 J=0,19
C  ADVANCE COMPONENTS U(I+1,J) IF CELL IS NOT A VACUUM CELL.
      IF(NCELL(I,J).EQ.0)GOTO 4      
      A=(U(I+2,J)+U(I,J)+U(I+1,J+1)+U(I+1,J-1))/4
      B=(U(I+2,J)**2-U(I,J)**2)/2/DEL
      C=(U(I+1,J+1)+U(I+1,J))*(V(I+1,J+1)+V(I,J+1))/4/DEL
      D=(U(I+1,J-1)+U(I+1,J))*(V(I+1,J)+V(I,J))/4/DEL
      E=(P(I+1,J)-P(I,J))/DEL/RO
      UX(I+1,J)=A-(B+C-D+E)*DT
    4 CONTINUE
C  NOW DEAL WITH V COMPONENTS
      DO 14 I=0,19
      DO 14 J=-1,19
C  ADVANCE V(I,J+1) IF CELL IS NOT A VACUUM CELL
      IF(NCELL(I,J).EQ.0)GOTO 14      
      A=(V(I,J+2)+V(I,J)+V(I+1,J+1)+V(I-1,J+1))/4
      B=(V(I,J+2)**2-V(I,J)**2)/2/DEL
      C=(V(I+1,J+1)+V(I,J+1))*(U(I+1,J+1)+U(I+1,J))/4/DEL
      D=(V(I-1,J+1)+V(I,J+1))*(U(I,J+1)+U(I,J))/4/DEL
      E=(P(I,J+1)-P(I,J))/DEL/RO 
      Z=G
      IF(J+1.EQ.0)Z=0
      VX(I,J+1)=A-(B+C-D+E+Z)*DT
   14 CONTINUE
C  NOW DEAL WITH SURFACE CELLS.  IN THE ABOVE SOME OF THEIR VELOCITY
C  COMPONENTS WOULD HAVE BEEN MODIFIED BUT MUST NOW BE CHANGED TO GIVE
C  CORRECT BOUNDARY CONDITIONS
      DO 8 I=0,19
      DO 8 J=0,19
      IF(IVAC(I,J).EQ.0)GOTO 8
C  SURFACE CELL IDENTIFIED
      K=IVAC(I,J)
      CALL BOUNDARY(I,J,U,V,UX,VX,K,G,DT)            
    8 CONTINUE
C  TRANSFER NEW VALUES
      DO 66 I=0,20
      DO 66 J=0,20
      IF(J.EQ.20)GOTO 67
      U(I,J)=UX(I,J)
      UX(I,J)=0
   67 IF(I.EQ.20)GOTO 66
      V(I,J)=VX(I,J)
      VX(I,J)=0
   66 CONTINUE
C  FILL IN TABLE EDGES TO GIVE CONDITIONS FOR FREE-SLIP BOUNDARIES.
      DO 78 M=0,20
C  MOTIONS PARALLEL TO BOUNDARY ON OPPOSITE SIDES ARE EQUAL.
      U(M,-1)=U(M,0)
      U(M,20)=U(M,19)
      V(-1,M)=V(0,M)
      V(20,M)=V(19,M)
C  MOTIONS PERPENDICULAR TO THE BOUNDARY ON OPPOSITE SIDES ARE REVERSED.
      U(-1,M)=-U(1,M)
      U(21,M)=-U(19,M)
      V(M,-1)=-V(M,1)
      V(M,21)=-V(M,19)
   78 CONTINUE
C  NOW MOVE MARKER PARTICLES
      CALL MOVE(U,V,NCELL,NPART,DEL,DT)
      TIME=TIME+DT
      NOCYC=NOCYC+1
      IF(NOCYC.NE.NC(NPT))GOTO 77
      NF=10+NPT
      DO 30 I=1,NPART
      WRITE(NF,*)X(I),Y(I)
   30 CONTINUE
      WRITE(6,*)TIME
      NPT=NPT+1
      IF(NPT.LE.NOUT)GOTO 77
      STOP
      END                     


      SUBROUTINE BOUNDARY(I,J,U,V,UX,VX,K,G,DT)
      DIMENSION U(-1:21,-1:20),V(-1:20,-1:21),UX(0:20,0:19),
     + VX(0:19,0:20)
      GOTO(3,6,3,4,5,6,5,8,9,15,15,8,5,15,15)K
C APPLY BOUNDARY CONDITION ACCORDING TO THE VALUE OF K      
   15 UX(I,J)=U(I,J)
      UX(I+1,J)=U(I+1,J)
      IF(K.EQ.11)VX(I,J+1)=VX(I,J)
      IF(K.EQ.10.OR.K.EQ.11)GOTO 100
      IF(K.EQ.14)THEN
      VX(I,J)=VX(I,J+1)
      GOTO 100
      ENDIF
    5 VX(I,J)=V(I,J)-G*DT
      VX(I,J+1)=V(I,J+1)-G*DT
      IF(K.EQ.13)GOTO 8
      IF(K.EQ.15.OR.K.EQ.5)GOTO 100
      IF(K.EQ.7)THEN
      UX(I,J)=UX(I+1,J)
      GOTO 100
      ENDIF
    8 UX(I+1,J)=UX(I,J)
      IF(K.EQ.12)VX(I,J)=VX(I,J+1)
      GOTO 100
    9 UX(I+1,J)=UX(I,J)
    3 VX(I,J+1)=VX(I,J)
      IF(K.EQ.9.OR.K.EQ.1)GOTO 100
      UX(I,J+1)=UX(I,J)
      GOTO 100
    6 UX(I,J)=UX(I+1,J)
      IF(K.EQ.2)GOTO 100
    4 VX(I,J)=VX(I,J+1)
  100 RETURN
      END


      SUBROUTINE VACUUM(NPART,NCELL,DEL,G)
      DIMENSION NCELL(-1:20,-1:20),X(2048),Y(2048)
      COMMON X,Y          
C  CLEAR ALL CELLS
      DO 1 I=0,19
      DO 1 J=0,19
      NCELL(I,J)=0
    1 CONTINUE
C  FIND NUMBER OF PARTICLES IN EACH CELL.  THE PARTICLES ARE CONSTRAINED
C  TO BE INSIDE THE ENCLOSURE.
      DO 2 K=1,NPART
      I=INT(X(K)/DEL)
      IF(I*(I-19).GT.0)GOTO 100
      J=INT(Y(K)/DEL)
      IF(J*(J-19).GT.0)GOTO 100
      NCELL(I,J)=NCELL(I,J)+1
    2 CONTINUE
C  VACUUM CELLS (I,J) ARE NOW RECOGNIZED BY HAVING NCELL(I,J)=0.
      GOTO 50
  100 WRITE(6,'('' ERROR.  PARTICLE DETECTED OUTSIDE ENCLOSURE.'')')
      STOP
   50 RETURN
      END            


      SUBROUTINE SURFACE(NCELL,IVAC)
      DIMENSION IVAC(-1:20,-1:20),NCELL(-1:20,-1:20),X(2048),Y(2048)
      COMMON X,Y
C  CLEAR ARRAY IVAC
      DO 1 I=0,19
      DO 1 J=0,19
      IVAC(I,J)=0
    1 CONTINUE
C  VALUE OF IVAC GIVES THE TYPE OF NON-VACUUM CELL
C  IVAC=0 IS A NON-SURFACE CELL
C  IVAC = 1 TO 15 DESCRIBES THE TYPE OF VACUUM CELL
      DO 2 I=0,19
      DO 2 J=0,19
      IF(NCELL(I,J).EQ.0)GOTO 2
      IF(J.EQ.19)GOTO 3
      IF(NCELL(I,J+1).EQ.0)IVAC(I,J)=IVAC(I,J)+1
    3 IF(I.EQ.0)GOTO 4
      IF(NCELL(I-1,J).EQ.0)IVAC(I,J)=IVAC(I,J)+2
    4 IF(J.EQ.0)GOTO 5
      IF(NCELL(I,J-1).EQ.0)IVAC(I,J)=IVAC(I,J)+4
    5 IF(I.EQ.19)GOTO 2
      IF(NCELL(I+1,J).EQ.0)IVAC(I,J)=IVAC(I,J)+8
    2 CONTINUE
      RETURN
      END


      SUBROUTINE GAUSSP(A,B,X,N)
C  THIS SOLVES A SET OF LINEAR EQUATIONS, Ax = b, WHEN THE MATRIX HAS
C  A STRONG DIAGONAL.   THE SOR (SUCCESSIVE OVER-RELAXATION) METHOD IS
C  USED, WHICH IS THE SAME AS GAUSS-SEIDEL IF THE OVER-RELAXATION
C  FACTOR IS 1.  UP TO 128 EQUATIONS CAN BE HANDLED WITH ARRAY DIMENSIONS
C  PROVIDED.
      REAL A(128,128),B(128),X(128)
C  SET TOLERANCE
      TOL=1.E-4
C  PUT INITIAL ESTIMATE OF SOLUTION ELEMENTS ALL EQUAL ZERO
      DO 1 I=1,N
      X(I)=0
    1 CONTINUE
C  SET OVER-RELAXATION FACTOR TO 1.5
      W=1.5      
      ICYCLE=0
    5 ICYCLE=ICYCLE+1
      DIF=0
      DO 7 I=1,N
      SUM=B(I)
      DO 3 J=1,N
      IF(J.EQ.I)GOTO 3
      SUM=SUM-A(I,J)*X(J)
    3 CONTINUE
      EST=SUM/A(I,I)
      Z=W*(EST-X(I))
      X(I)=X(I)+Z
      IF(ABS(Z).GT.DIF)DIF=ABS(Z)
    7 CONTINUE
      IF(DIF.LT.TOL)GOTO 4
C  NOT MORE THAN 100 CYCLES ALLOWED
      IF(ICYCLE.LT.100)GOTO 5
    4 RETURN
      END              


      SUBROUTINE SETUP(DEL,G,NO)
      DIMENSION X(2048),Y(2048)
      COMMON X,Y
C  THIS PUTS 16 MARKERS IN EACH OF AN ARRAY OF 10x10 CELLS 
      NO=0
      DO 1 I=0,19
      JZ=9
      IF(I.GT.9)GOTO 1
      DO 2 J=0,JZ
      DO 3 K=0,15
      L=K/4
      M=K-4*L
      NO=NO+1
      X(NO)=(I+0.125+0.25*FLOAT(L))*DEL
      Y(NO)=(J+0.125+0.25*FLOAT(M))*DEL
    3 CONTINUE
    2 CONTINUE
    1 CONTINUE
      RETURN
      END



      SUBROUTINE PRESSURE(P,U,V,NCELL,RO,G,DEL,DT)
      DIMENSION U(-1:21,-1:20),V(-1:20,-1:21),RHS(128),XX(128),
     +NCELL(-1:20,-1:20),P(-1:20,-1:20)
      REAL LHS(128,128)
      INTEGER PCODE(128,2),RP(0:19,0:19)
C  FIND NON-VACUUM CELLS FOR PRESSURE DETERMINATION.  ALLOCATE SEQUENTIAL
C  CODE NUMBERS TO SUCH CELLS. ARRAY PCODE GIVES THE (I,J) FOR THE CODE 
C  NUMBER AND ARRAY RP GIVES THE CODE NUMBER FROM THE (I,J). 
C  CLEAR TABLE
      DO 1 I=1,128
      DO 1 J=1,2
      PCODE(I,J)=0
    1 CONTINUE
      NUM=0
      DO 2 I=0,19
      DO 2 J=0,19
      RP(I,J)=0
      IF(NCELL(I,J).EQ.0)GOTO 2
      NUM=NUM+1
      RP(I,J)=NUM
      PCODE(NUM,1)=I
      PCODE(NUM,2)=J
    2 CONTINUE
C  CLEAR LHS WHICH WILL CONTAIN THE COEFFICIENTS OF THE LINEAR EQUATIONS
C  FOR SOLVING FOR PRESSURES.
      DO 10 I=1,128
      DO 10 J=1,128
      LHS(I,J)=0
   10 CONTINUE
C  FIND COEFFICIENTS OF EQUATIONS FOR SOLVING FOR PRESSURES
      DO 3 K=1,NUM
      I=PCODE(K,1)
      J=PCODE(K,2)
      SUM=0
      SUM=SUM+(U(I+2,J)**2-U(I,J)**2)/2/DEL
      SUM=SUM-(U(I+1,J)**2-U(I-1,J)**2)/2/DEL
      SUM=SUM+(V(I,J+2)**2-V(I,J)**2)/2/DEL
      SUM=SUM-(V(I,J+1)**2-V(I,J-1)**2)/2/DEL
      SUM=SUM+(U(I+1,J+1)+U(I+1,J))*(V(I+1,J+1)+V(I,J+1))
      SUM=SUM-(V(I,J)+V(I+1,J))*(U(I+1,J)+U(I+1,J-1))
      SUM=SUM-(U(I,J+1)+U(I,J))*(V(I,J+1)+V(I-1,J+1))
      SUM=SUM+(V(I-1,J)+V(I,J))*(U(I,J)+U(I,J-1))
      SUMP=0
      CALL DD(U,V,I+1,J,DELV)
      SUMP=SUMP+DELV
      CALL DD(U,V,I-1,J,DELV)
      SUMP=SUMP+DELV
      CALL DD(U,V,I,J+1,DELV)
      SUMP=SUMP+DELV
      CALL DD(U,V,I,J-1,DELV)
      SUMP=SUMP+DELV
      RHS(K)=RO*(DEL*SUMP/4/DT-SUM/2)
      IF(J.EQ.0)RHS(K)=RHS(K)-G*RO*DEL
      LHS(K,K)=-4
      IF(I+1.GT.19)THEN
      LHS(K,K)=LHS(K,K)+1
      GOTO 4
      ENDIF
      L=RP(I+1,J)
      IF(L.EQ.0)GOTO 4
      LHS(K,L)=1
    4 IF(I-1.LT.0)THEN
      LHS(K,K)=LHS(K,K)+1
      GOTO 5 
      ENDIF
      L=RP(I-1,J)
      IF(L.EQ.0)GOTO 5
      LHS(K,L)=1
    5 IF(J+1.GT.31)THEN
      LHS(K,K)=LHS(K,K)+1
      GOTO 6
      ENDIF
      L=RP(I,J+1)
      IF(L.EQ.0)GOTO 6
      LHS(K,L)=1
    6 IF(J-1.LT.0)THEN    
      LHS(K,K)=LHS(K,K)+1
      GOTO 3
      ENDIF
      L=RP(I,J-1)
      IF(L.EQ.0)GOTO 3
      LHS(K,L)=1
    3 CONTINUE
C  COEFFICIENTS FOR ALL EQUATIONS FOUND
      CALL GAUSSP(LHS,RHS,XX,NUM)
      DO 20 K=1,NUM
      I=PCODE(K,1)
      J=PCODE(K,2)
      P(I,J)=XX(K)
   20 CONTINUE
      RETURN
      END


      SUBROUTINE MOVE(U,V,NCELL,NPART,DEL,DT)
      DIMENSION X(2048),Y(2048),U(-1:21,-1:20),V(-1:20,-1:21),
     +NCELL(-1:20,-1:20)
      COMMON X,Y
      DO 1 K=1,NPART
C  FIND HORIZONTAL VELOCITY CELL WITHING WHICH PARTICLE RESIDES AND
C  FRACTIONAL COORDINATES IN THAT CELL
      A=X(K)/DEL
      B=Y(K)/DEL-0.5
      IF(B.LT.0)B=0
      I=INT(A)
      J=INT(B)
      ALF=A-I
      BET=B-J
      UU=(1-ALF)*(1-BET)*U(I,J)+(1-ALF)*BET*U(I,J+1)+
     +ALF*(1-BET)*U(I+1,J)+ALF*BET*U(I+1,J+1)
C  TEST IF THERE IS BOUNDARY IN X DIRECTION.   IF SO JUST TAKE VELOCITY   
C  OF EDGE AWAY FROM BOUNDARY.
C    2 IF(I.EQ.19)THEN
C      UU=U(I,J)
C      GOTO 3
C      ENDIF
C      UU=(1-ALF)*U(I,J)+ALF*U(I+1,J)
C  FIND VERTICAL VELOCITY CELL IN WHICH PARTICLE RESIDES AND COORDINATES
C  WITHIN THAT CELL.
    3 A=X(K)/DEL-0.5
      IF(A.LT.0)A=0
      B=Y(K)/DEL
      I=INT(A)
      J=INT(B)
      ALF=A-I
      BET=B-J
      VV=(1-ALF)*(1-BET)*V(I,J)+ALF*(1-BET)*V(I+1,J)+
     +(1-ALF)*BET*V(I,J+1)+ALF*BET*V(I+1,J+1)
      GOTO 10
C  TEST IF THERE IS A BOUNDARY IN THE Y DIRECTION.  IF SO JUST TAKE
C  THE VELOCITY OF THE EDGE AWAY FROM THE BOUNDARY.
C    4 IF(J.EQ.19)THEN
C      VV=V(I,J)  
C      GOTO 10
C      ENDIF
C      VV=(1-BET)*V(I,J)+BET*V(I,J+1)
C  MOVE PARTICLE.   IF IT GOES OUTSIDE BOUNDARY THEN REFLECT IT 
C  FROM BOUNDARY.
   10 X(K)=X(K)+UU*DT
      IF(X(K).GE.20.0*DEL)X(K)=40.0*DEL-X(K)-1.0E-3
      IF(X(K).LE.0)X(K)=-X(K)+1.0E-3
      Y(K)=Y(K)+VV*DT
      IF(Y(K).GE.20.0*DEL)Y(K)=40.0*DEL-Y(K)-1.0E-3
      IF(Y(K).LT.0)Y(K)=-Y(K)+1.0E-3
    1 CONTINUE
      RETURN
      END
           
      SUBROUTINE DD(U,V,I,J,DELV)
      DIMENSION U(-1:21,-1:20),V(-1:20,-1:21)
      DELV=V(I,J+1)-V(I,J)+U(I+1,J)-U(I,J)
      RETURN
      END
